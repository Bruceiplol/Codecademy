#Time: O(n)
#Space: O(1)
#Two-Pointer

def efficient_solution(heights):
  total_water = 0
  left_pointer = 0
  right_pointer = len(heights) - 1
  left_bound = 0
  right_bound = 0
  
  while left_pointer < right_pointer:
    if heights[left_pointer] <= heights[right_pointer]:
      left_bound = max(left_bound, heights[left_pointer])
      total_water += left_bound - heights[left_pointer]
      left_pointer += 1
    else:
      right_bound = max(right_bound, heights[right_pointer])
      total_water += right_bound - heights[right_pointer]
      right_pointer -= 1
  return total_water

test_array = [4, 2, 1, 3, 0, 1, 2]
print(efficient_solution(test_array))

#The Naive Solution O(n^2)
#The naive solution to the problem is to:

#1.Traverse every element in the array
#2.Find the highest left bound for that index
#3.Find the highest right bound for that index
#4.Take the lower of those two values
#5.Subtract the height of that index from that minimum
#6.Add the difference to the total amount of water

#Two Pointer Solution O(n)
#1.list out the pointers and bounds
#2.Compare the left and right bound, determine which is lower and move that pointer (similar to naive step4)
#3.Set the bound to be the highest for that index
#4.Add the difference to the total amount of water

