#Merge Sort (Normal Version with space O(n)):
#1. def a merge_sort function (for breaking down the lst to become only 1 value left)
#2. partition: find the middle index and split the list into two sub-list
#3. recursely breaking the sublist by calling merge_sort(left_split and right_split)
#4. output the merge(left, right) sorted list
#5. create merge function (combine the sub-list(left and right) back together) and would return a result sorted list
#6. Merge1: while left and right sub-lists have value, compare the smallest value of them (left[0] and right[0]) 
#           to check which one is small and add it to the result list (remember to pop out the smallest value to avoid infinte loop)
#7. Merge2: when we finishing comparing the left and right sub-lists, there could be leftovers remaining, so last is to check if there is value leftover and add them into result list

def merge_sort(items):
  if len(items) <= 1:
    return items

  middle_index = len(items) // 2
  left_split = items[:middle_index]
  right_split = items[middle_index:]

  left_sorted = merge_sort(left_split)
  right_sorted = merge_sort(right_split)

  return merge(left_sorted, right_sorted)

def merge(left, right):
  result = []

  while (left and right):
    if left[0] < right[0]:
      result.append(left[0])
      left.pop(0)
    else:
      result.append(right[0])
      right.pop(0)

  if left:
    result += left
  if right:
    result += right

  return result

unordered_list1 = [356, 746, 264, 569, 949, 895, 125, 455]
unordered_list2 = [787, 677, 391, 318, 543, 717, 180, 113, 795, 19, 202, 534, 201, 370, 276, 975, 403, 624, 770, 595, 571, 268, 373]
unordered_list3 = [860, 380, 151, 585, 743, 542, 147, 820, 439, 865, 924, 387]

ordered_list1 = merge_sort(unordered_list1)
ordered_list2 = merge_sort(unordered_list2)
ordered_list3 = merge_sort(unordered_list3)

print(ordered_list1)
print(ordered_list2)
print(ordered_list3)
