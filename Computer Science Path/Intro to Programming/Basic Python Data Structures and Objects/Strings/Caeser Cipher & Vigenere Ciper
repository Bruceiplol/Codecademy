encoded_message_1 = "xuo jxuhu! jxyi yi qd unqcfbu ev q squiqh syfxuh. muhu oek qrbu je tusetu yj? y xefu ie! iudt cu q cuiiqwu rqsa myjx jxu iqcu evviuj!"
encoded_message_2= 'jxu evviuj veh jxu iusedt cuiiqwu yi vekhjuud.'
encoded_message_3 = 'bqdradyuzs ygxfubxq omqemd oubtqde fa oapq kagd yqeemsqe ue qhqz yadq eqogdq!'
encoded_message_4 = "vhfinmxkl atox kxgwxkxw tee hy maxlx hew vbiaxkl hulhexmx. px'ee atox mh kxteer lmxi ni hnk ztfx by px ptgm mh dxxi hnk fxlltzxl ltyx."

def caesar_decode(message, offset):
    decoded = ""
    for letter in message:
        if letter.islower():
            position = ord(letter) - ord('a')
            new_position = (position + offset) % 26
            new_letter = chr(new_position + ord('a'))
            decoded += new_letter
        elif letter.isupper():
            position = ord(letter) - ord('A')
            new_position = (position + offset) % 26
            new_letter = chr(new_position + ord('A'))
            decoded += new_letter
        else:
            decoded += letter
    return decoded

def caesar_encode(message, offset):
    encoded = ""
    for letter in message:
        if letter.islower():
            position = ord(letter) - ord('a')
            new_position = (position - offset) % 26
            new_letter = chr(new_position + ord('a'))
            encoded += new_letter
        elif letter.isupper():
            position = ord(letter) - ord('A')
            new_position = (position + (26-offset)) % 26
            new_letter = chr(new_position + ord('A'))
            encoded += new_letter
        else:
            encoded += letter
    return encoded

decode_message_1 = 'Thanks for your message, it was fun.'
encode_message_1_1= 'Jxqdai veh oekh cuiiqwu, yj mqi vkd.'
print(caesar_decode(encoded_message_1,10))
print(caesar_encode(decode_message_1,10))
print(caesar_decode(encode_message_1_1,10))
print(caesar_decode(encoded_message_2,10))
print(caesar_decode(encoded_message_3,14))



#for i in range(25):
  #print(f'This is the {i} times for decoding: {caesar_decode(encoded_message_4,i)}')

print(caesar_decode(encoded_message_4,7))



def vigenere_decode(message, key):
  decode =''
  key_index=0
  for letter in message:
    if letter.islower():
      letter_position = ord(letter)-ord('a')
      key_position = ord(key[key_index].lower()) - ord('a')
      decoded_letter = chr((letter_position + key_position) %26 +ord('a'))
      decode += decoded_letter
      key_index = (key_index+1)% len(key)
    elif letter.isupper():
      letter_position = ord(letter)-ord('A')
      key_position = ord(key[key_index].upper()) - ord('A')
      decoded_letter = chr((letter_position + key_position) %26 +ord('A'))
      decode += decoded_letter
      key_index = (key_index+1)% len(key)
    else:
      decode += letter
  return decode

v_encoded_message_1 = 'txm srom vkda gl lzlgzr qpdb? fepb ejac! ubr imn tapludwy mhfbz cza ruxzal wg zztylktoikqq!' 
print(vigenere_decode(v_encoded_message_1, 'friends'))

def vigenere_encode(message, key):
  encode =''
  key_index=0
  for letter in message:
    if letter.islower():
      letter_position = ord(letter)-ord('a')
      key_position = ord(key[key_index].lower()) - ord('a')
      encoded_letter = chr((letter_position + key_position) %26 +ord('a'))
      encode += encoded_letter
      key_index = (key_index+1)% len(key)
    elif letter.isupper():
      letter_position = ord(letter)-ord('A')
      key_position = ord(key[key_index].upper()) - ord('A')
      encoded_letter = chr((letter_position + key_position) %26 +ord('A'))
      encode += encoded_letter
      key_index = (key_index+1)% len(key)
    else:
      encode += letter
  return encode

v_decoded_message = 'Thank you!'
v_encoded_message_2 = 'Oqsjx vwp!'
print(vigenere_encode(v_decoded_message, 'friends'))
print(vigenere_decode(v_encoded_message_2, 'friends'))
