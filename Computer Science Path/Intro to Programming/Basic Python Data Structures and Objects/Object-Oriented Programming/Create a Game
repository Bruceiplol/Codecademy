import random

#Basic universal conditions
basic_health = 300
basic_damage = 150

#Creating character standard
class Character:
  def __init__(self, name, sex, character_class, level = 1, damage = None):
    self.name = name
    self.sex = sex
    self.character_class = character_class
    self.level = level
    self.health = basic_health + level*100
    self.damage = basic_damage + level*50

    if character_class.lower() == "warrior":
      self.__class__ = Warrior
    elif character_class.lower() == "wizard":
      self.__class__ = Wizard
    elif character_class.lower() == "monster":
      self.__class__ = Monster
    else:
      raise ValueError("Invalid character class.")

  def __repr__(self):
    return f"{self.name}, who is a {self.type}, is at level {self.level}, and has {self.health} health remaining."

  def defend(self, commands):
    if commands == 1:
      print (f'{self.name} chooses to shield~')
      return 0.6
    elif commands == 2:
      print (f'{self.name} tries to dodge~')
      choice = random.choice([0,1])
      if choice == 0:
        print (f'{self.name} has dodged successfully!')
        return 0
      else:
        print (f'{self.name} has failed to dodge!')
        return 1
        
#Sub-class - Character_class1
class Warrior(Character):
  def __init__(self, name, sex, character_class, level = 1, damage = None):
    super().__init__(name, sex, "Warrior", level, damage)
  def attack(self, commands):
    if commands == 1:
      print(f'{self.name} uses slash!!')
      return self.damage
    elif commands == 2:
      print(f'{self.name} uses a spin slash!!')
      return random.choice([self.damage*1.5, self.damage*0.5])

#Sub-class - Character_class2
class Wizard(Character):
  def __init__(self, name, sex, character_class, level = 1, damage = None):
    super().__init__(name, sex, "Wizard", level, damage)
  def attack(self, commands):
    if commands == 1:
      print(f'{self.name} uses fire ball!!')
      return self.damage
    elif commands == 2:
      print(f'{self.name} calls the thunder!!')
      return random.choice([self.damage*1.5, self.damage*0.5])

#Sub-class - Monster_class
class Monster(Character):
  def __init__(self, name, character_class="Monster", level = 1):
    super().__init__(name=name, sex="", character_class = character_class, level=1)
    self.health = basic_health + level*100
    self.damage = basic_damage + level*500

  def attack(self, commands):
    if commands == 1:
      print(f'{self.name} uses scratches!!')
      return 140
    elif commands == 2:
      print(f'{self.name} spits venom!!')
      return random.choice([200,100])

#In-game settings
print("Welcome to the Fantacy World ~!")
player_name = input("Please enter your name: ")
player_class = input("Please choose your character class (Warrior or Wizard): ")
player_sex = input("Please choose your sex (Male or Female): ")
player = Character(player_name, player_sex, player_class)
enemy=Monster("Goblin")
randomc = random.choice([1,2])

#Fight Turns
print(f"{player_name} meets level {enemy.level} {enemy.name}!!")
while True:
  #My Turn
  print("It is Your Attack Turn:")
  attack_command = int(input("Please choose a command: \n(1) Normal Attack (2) Special Attack \n" ))
  player_damage = player.attack(attack_command)
  health_lose = int(enemy.defend(random.choice([1,2])) * player_damage)
  enemy.health -= health_lose
  if enemy.health <= 0:
    print(f'{enemy.name} is down, {player.name} wins!!!')
    break
  else:
    print(f'{enemy.name} is damaged by {health_lose} points, remaining {enemy.health} points')
    print("")

  #Enemy Turn
  print("It is Your Enemy Attack Turn:")
  defend_command = int(input("Please choose a command: \n(1) Shield (2) Dodge \n"))
  enemy_damage = enemy.attack(random.choice([1,2]))
  health_lose = int(player.defend(defend_command) * enemy_damage)
  player.health -= health_lose
  if player.health <= 0:
    print(f'{player.name} is down, GAME OVER!')
    break
  else:
    print(f'{player.name} is damaged by {health_lose} points, remaining {player.health} points')
    print("")










