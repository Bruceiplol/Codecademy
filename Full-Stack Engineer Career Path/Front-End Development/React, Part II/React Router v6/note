1. npm install
2. npm install --save react-router-dom@6

In file:
import { RouterProvider, createBrowserRouter, createRoutesFromElements, Route } from "react-router-dom"
const router = createBrowserRouter( /* application routes are defined here */ );
<RouterProvider router={ router } />

======================================================================================================================================
Each <Route> component should include:
1. A path prop indicating the exact URL path that will cause the route to render.
2. An element prop describing the component to be rendered.

example:
const router = createBrowserRouter(createRoutesFromElements(
  <Route path='/about' element={ <About/> } />
));
==========================================================================================================================================
Both Link and NavLink components work much like anchor tags:
They have a to prop that indicates the location to redirect the user to, similar to the anchor tagâ€™s href attribute.
They wrap some HTML to use as the display for the link.
<Link to="/about">About</Link>
<NavLink to="/about">About</NavLink>

Nav can use className and style prop, able to pass function into className (conditional style)
e.g <NavLink to="." end style={({ isActive }) => isActive ? activeStyles : null}> Info </NavLink>

"/about" => absolute path (start from root)
"about" => relative path (if nested => auto next path level)
============================================================================================================================================
Dynamic Routes:
const route = createBrowserRouter(createRoutesFromElement(
  <Route path='/articles/:title' element={ <Article /> }/>
))

  Using useParmas hook:
  import { Link, useParams } from 'react-router-dom';
  
  export default function Article() {
    
    let { title } = useParams();
    // title will be equal to the string 'objects'
  
    // The title will be rendered in the <h1>
    return (
      <article>
        <h1>{title}</h1>
      </article>
    );

Render Child Route (expanding/ displaying the secret components at the same page):
nested route + <Outlet />
parent route = share UI (shared layout: navbar or footer) -- <Link /> or < NavLink /> + < Outlet />



===============================================================================================================================================
Redirect -- <Navigate>: (can be used for login logout) -- declarative
import { Navigate } from 'react-router-dom';
<Navigate to='/' />

useNavigate: -- imperative
For example:

navigate(-1) - navigate to the previous URL in the history stack.
navigate(1) - navigate to the next URL in the history stack.
navigate(-3) - navigate 3 URLs back in the history stack.

import { useNavigate } from `react-router-dom`

export const BackButton = () => {
  const navigate = useNavigate()

  return (
    <button onClick={() => navigate(-1)}>
      Go Back
    </button>
  )
}

==================================================================================================================================================
Query Parameters:
uery parameters can be useful in determining which content to display to our user and React Router provides a mechanism for grabbing query parameter values with the useSearchParams() hook.

import { useSearchParams } from 'react-router-dom'

// Rendered when a user visits "/list?order=DESC"
export const SortedList = (numberList) => {
  const [ searchParams, setSearchParams ] = useSearchParams();
  const sortOrder = searchParams.get('order');

  if (sortOrder === 'ASC') {
    // render the numberList in ascending order
  } else if (sortOrder === 'DESC') {
    // render the numberList in descending order
  } else {
    // render the numberList as is
  }
}

import { useSearchParams } from 'react-router-dom';

// Rendered when a user visits "/list"
export const List = (numberList) => {
  const [ searchParams, setSearchParams ] = useSearchParams();

  // render the numberList in ascending order
  <button click={ () => setSearchParams( {order: 'ASC'} ) }>
    Sort 
  </button>
}

import { useNavigate, createSearchParams } from 'react-router-dom';
// get navigate function
const navigate = useNavigate();

// define an object where the key is is the query parameter name and value is query parameter value
const searchQueryParams = {
  order: 'ASC'
}

// use createSearchParams which takes an object and transforms it to a query string of the form order=ASC
const searchQueryString = createSearchParams(searchQueryParams);

// force a navigate by passing in an object with pathname indicating that path to navigate and search indicating the query parameters to append
navigate({
  pathname:'/list',
  search: `?${searchQueryString}`
})
